// import React, { useEffect, useState } from "react";
// import { Modal, Button } from "antd";
// import { MessageOutlined } from "@ant-design/icons";
// import CommunityService from "../../services/CommunityServices";
// import "./QuestionList.css";

// const QuestionList = () => {
//   const [questions, setQuestions] = useState([]);
//   const [loading, setLoading] = useState(true);
//   const [selectedQuestion, setSelectedQuestion] = useState(null);
//   const [isModalOpen, setIsModalOpen] = useState(false);

//   useEffect(() => {
//     fetchQuestions();
//   }, []);

//   const fetchQuestions = async () => {
//     setLoading(true);
//     try {
//       const response = await CommunityService.getApprovedQuestions();
//       setQuestions(response.data);
//     } catch (error) {
//       console.error("L·ªói khi l·∫•y danh s√°ch c√¢u h·ªèi:", error);
//     } finally {
//       setLoading(false);
//     }
//   };

//   // X·ª≠ l√Ω m·ªü popup
//   const openModal = (question) => {
//     setSelectedQuestion(question);
//     setIsModalOpen(true);
//   };

//   // X·ª≠ l√Ω ƒë√≥ng popup
//   const closeModal = () => {
//     setIsModalOpen(false);
//     setSelectedQuestion(null);
//   };
//   const handleToggleLike = async (questionId) => {
//     try {
//       const response = await CommunityService.toggleLike({
//         questionId,
//         patientId: USER_ID, // L·∫•y t·ª´ state ho·∫∑c context c·ªßa user
//       });

//       setQuestions((prevQuestions) =>
//         prevQuestions.map((q) =>
//           q._id === questionId
//             ? { ...q, likes: response.data.likes, likedBy: response.data.likedBy }
//             : q
//         )
//       );
//     } catch (error) {
//       console.error("L·ªói khi like/unlike:", error);
//     }
//   };
//   return (
//     <div className="question-list-container">
//       <h3 className="question-list-title">C√°c c√¢u h·ªèi ƒë√£ ƒë∆∞·ª£c tr·∫£ l·ªùi</h3>
//       {loading ? (
//         <p className="loading-text">ƒêang t·∫£i d·ªØ li·ªáu...</p>
//       ) : questions.length === 0 ? (
//         <p className="no-question-text">Ch∆∞a c√≥ c√¢u h·ªèi n√†o.</p>
//       ) : (
//         questions.map((q) => (
//           <div key={q._id} className="question-item">
//             {/* Hi·ªÉn th·ªã ti√™u ƒë·ªÅ c√¢u h·ªèi */}
//             <h4 className="question-title">{q.title}</h4>

//             {/* Hi·ªÉn th·ªã th√¥ng tin ng∆∞·ªùi h·ªèi */}
//             <p className="question-meta">
//               <strong>
//                 {q.gender}, {q.age} tu·ªïi
//               </strong>
//             </p>

//             {/* N·ªôi dung c√¢u h·ªèi */}
//             <p className="question-content">{q.content}</p>

//             {/* Th·ªùi gian ƒëƒÉng c√¢u h·ªèi */}
//             <p className="question-date">
//               üìÖ {new Date(q.createdAt).toLocaleDateString()}
//             </p>

//             {/* N√∫t xem chi ti·∫øt */}
//             <div className="question-footer">
              
//               <span className="question-reply" onClick={() => openModal(q)}>
//                 <MessageOutlined className="reply-icon" />{" "}
//                 {q.answer ? "1 Tr·∫£ l·ªùi" : "Ch∆∞a c√≥ tr·∫£ l·ªùi"}
//               </span>
//               <span className="question-thanks" onClick={() => handleToggleLike(q._id)}>
//   ‚ù§Ô∏è {q.likes} C·∫£m ∆°n
// </span>
//             </div>
//           </div>
//         ))
//       )}

//       {/* Popup Modal hi·ªÉn th·ªã chi ti·∫øt c√¢u h·ªèi */}
//       <Modal
//         title="Chi ti·∫øt c√¢u h·ªèi"
//         open={isModalOpen}
//         onCancel={closeModal}
//         footer={null}
//       >
//         {selectedQuestion && (
//           <div className="modal-content">
//             <h4 className="modal-question-title">{selectedQuestion.title}</h4>
//             <p className="modal-question-meta">
//               {selectedQuestion.gender}, {selectedQuestion.age} tu·ªïi
//             </p>
//             <p className="modal-question-content">{selectedQuestion.content}</p>
//             <p className="modal-question-date">
//               üìÖ Ng√†y h·ªèi:{" "}
//               {new Date(selectedQuestion.createdAt).toLocaleDateString()}
//             </p>

//             {selectedQuestion.answer ? (
//               <div className="modal-answer-section">
//                 <p>
//                   <strong>B√°c sƒ©:</strong>{" "}
//                   <span className="doctor-name">
//                     {selectedQuestion.doctorId?.name || "Ch∆∞a c·∫≠p nh·∫≠t"}
//                   </span>
//                 </p>
//                 <p>
//                   <strong>Tr·∫£ l·ªùi:</strong> {selectedQuestion.answer}
//                 </p>
//                 <p className="modal-answer-time">
//                   ‚è≥ Ng√†y tr·∫£ l·ªùi:
//                   {selectedQuestion.doctorCommentedAt
//                     ? new Date(
//                         selectedQuestion.doctorCommentedAt
//                       ).toLocaleDateString()
//                     : "Ch∆∞a c√≥"}
//                 </p>
//               </div>
//             ) : (
//               <p className="no-answer">Ch∆∞a c√≥ c√¢u tr·∫£ l·ªùi.</p>
//             )}
//           </div>
//         )}
//       </Modal>
//     </div>
//   );
// };

// export default QuestionList;
import React, { useEffect, useState } from "react";
import { Modal } from "antd";
import { MessageOutlined, HeartOutlined, HeartFilled } from "@ant-design/icons";
import CommunityService from "../../services/CommunityServices";
import "./QuestionList.css";

const QuestionList = () => {
  const [questions, setQuestions] = useState([]);
  const [loading, setLoading] = useState(true);
  const [selectedQuestion, setSelectedQuestion] = useState(null);
  const [isModalOpen, setIsModalOpen] = useState(false);

  // ‚ö° L·∫•y patientId t·ª´ localStorage (ho·∫∑c t·ª´ Context n·∫øu b·∫°n c√≥)
  const patientId = localStorage.getItem("patientId"); // Gi·∫£ s·ª≠ user ƒë√£ ƒëƒÉng nh·∫≠p v√† ID ƒë∆∞·ª£c l∆∞u v√†o localStorage

  useEffect(() => {
    fetchQuestions();
  }, []);

  const fetchQuestions = async () => {
    setLoading(true);
    try {
      const response = await CommunityService.getApprovedQuestions();
      setQuestions(response.data || []); // ƒê·∫£m b·∫£o response.data lu√¥n l√† m·∫£ng
    } catch (error) {
      console.error("L·ªói khi l·∫•y danh s√°ch c√¢u h·ªèi:", error);
      setQuestions([]);
    } finally {
      setLoading(false);
    }
  };

  // X·ª≠ l√Ω m·ªü popup
  const openModal = (question) => {
    setSelectedQuestion(question);
    setIsModalOpen(true);
  };

  // X·ª≠ l√Ω ƒë√≥ng popup
  const closeModal = () => {
    setIsModalOpen(false);
    setSelectedQuestion(null);
  };

  // X·ª≠ l√Ω Like / Unlike
  const handleToggleLike = async (questionId) => {
    if (!patientId) {
      console.error("Kh√¥ng th·ªÉ like v√¨ patientId ch∆∞a ƒë∆∞·ª£c t·∫£i");
      return;
    }

    try {
      const response = await CommunityService.toggleLike({
        questionId,
        patientId, // ‚ö° L·∫•y t·ª´ localStorage thay v√¨ hardcode
      });

      setQuestions((prevQuestions) =>
        prevQuestions.map((q) =>
          q._id === questionId
            ? { ...q, likedBy: response.data.likedBy || [] }
            : q
        )
      );
    } catch (error) {
      console.error("L·ªói khi like/unlike:", error);
    }
  };

  return (
    <div className="question-list-container">
      <h3 className="question-list-title">C√°c c√¢u h·ªèi ƒë√£ ƒë∆∞·ª£c tr·∫£ l·ªùi</h3>
      {loading ? (
        <p className="loading-text">ƒêang t·∫£i d·ªØ li·ªáu...</p>
      ) : questions.length === 0 ? (
        <p className="no-question-text">Ch∆∞a c√≥ c√¢u h·ªèi n√†o.</p>
      ) : (
        questions.map((q) => {
          const isLiked = q.likedBy?.some(id => id.toString() === patientId); // ‚ö†Ô∏è So s√°nh ƒë√∫ng ki·ªÉu d·ªØ li·ªáu
          return (
            <div key={q._id} className="question-item">
              {/* Hi·ªÉn th·ªã ti√™u ƒë·ªÅ c√¢u h·ªèi */}
              <h4 className="question-title">{q.title}</h4>

              {/* Hi·ªÉn th·ªã th√¥ng tin ng∆∞·ªùi h·ªèi */}
              <p className="question-meta">
                <strong>
                  {q.gender}, {q.age} tu·ªïi
                </strong>
              </p>

              {/* N·ªôi dung c√¢u h·ªèi */}
              <p className="question-content">{q.content}</p>

              {/* Th·ªùi gian ƒëƒÉng c√¢u h·ªèi */}
              <p className="question-date">
                üìÖ {q.createdAt ? new Date(q.createdAt).toLocaleDateString() : "Kh√¥ng x√°c ƒë·ªãnh"}
              </p>

              {/* N√∫t xem chi ti·∫øt */}
              <div className="question-footer">
                <span className="question-reply" onClick={() => openModal(q)}>
                  <MessageOutlined className="reply-icon" />{" "}
                  {q.answer ? "1 Tr·∫£ l·ªùi" : "Ch∆∞a c√≥ tr·∫£ l·ªùi"}
                </span>
                <span className="question-thanks" onClick={() => handleToggleLike(q._id)}>
                  {isLiked ? <HeartFilled style={{ color: "red" }} /> : <HeartOutlined />}{" "}
                  {q.likedBy?.length || 0} C·∫£m ∆°n
                </span>
              </div>
            </div>
          );
        })
      )}

      {/* Popup Modal hi·ªÉn th·ªã chi ti·∫øt c√¢u h·ªèi */}
      <Modal title="Chi ti·∫øt c√¢u h·ªèi" open={isModalOpen} onCancel={closeModal} footer={null}>
        {selectedQuestion ? (
          <div className="modal-content">
            <h4 className="modal-question-title">{selectedQuestion.title}</h4>
            <p className="modal-question-meta">
              {selectedQuestion.gender}, {selectedQuestion.age} tu·ªïi
            </p>
            <p className="modal-question-content">{selectedQuestion.content}</p>
            <p className="modal-question-date">
              üìÖ Ng√†y h·ªèi:{" "}
              {selectedQuestion.createdAt ? new Date(selectedQuestion.createdAt).toLocaleDateString() : "Kh√¥ng x√°c ƒë·ªãnh"}
            </p>

            {selectedQuestion.answer ? (
              <div className="modal-answer-section">
                <p>
                  <strong>B√°c sƒ©:</strong>{" "}
                  <span className="doctor-name">
                    {selectedQuestion.doctorId?.name || "Ch∆∞a c·∫≠p nh·∫≠t"}
                  </span>
                </p>
                <p>
                  <strong>Tr·∫£ l·ªùi:</strong> {selectedQuestion.answer}
                </p>
                <p className="modal-answer-time">
                  ‚è≥ Ng√†y tr·∫£ l·ªùi:{" "}
                  {selectedQuestion.doctorCommentedAt
                    ? new Date(selectedQuestion.doctorCommentedAt).toLocaleDateString()
                    : "Ch∆∞a c√≥"}
                </p>
              </div>
            ) : (
              <p className="no-answer">Ch∆∞a c√≥ c√¢u tr·∫£ l·ªùi.</p>
            )}
          </div>
        ) : (
          <p className="no-data">Kh√¥ng c√≥ d·ªØ li·ªáu.</p>
        )}
      </Modal>
    </div>
  );
};

export default QuestionList;
